# ../../sw/kt/fgcepics/fgcudpSup/Db/fgcudp_class_62.substitutions - This file is automatically generated by `parser/Output/EPICS/records/udp_records.pm`

# This is a template file - RECORD names can be edited!



############################################
# Status publication records for class 62  #
############################################



######## Common records to all classes ########

# Long inputs

file "fgcudp_longin.template"
{
pattern
{ RECORD, PARAM, EGU, DESC }
{ "CLASS_ID"   , "CLASS_ID__INT"   , "" , "" }
}

# Long inputs (bin)

file "fgcudp_longin_dig.template"
{
pattern
{ RECORD, PARAM, MASK, EGU, DESC }
{ "RUNLOG_BYTE", "RUNLOG_BYTE__RAW", "0xFF", "" , "" }
}

# Waveform inputs

file "fgcudp_waveform.template"
{
pattern
{ RECORD, PARAM, NELM, DESC }
{ "DATA_STATUS:_STR", "DATA_STATUS__STR", "256", "" }
}

# Bit inputs
file "fgcudp_bi.template"
{
pattern
{ RECORD, PARAM, MASK, ONAM, DESC }
{ "DATA_STATUS:DEVICE_IN_DB", "DATA_STATUS__RAW", "0x01", "DEVICE_IN_DB", "" }
{ "DATA_STATUS:DATA_VALID"  , "DATA_STATUS__RAW", "0x02", "DATA_VALID"  , "" }
{ "DATA_STATUS:CLASS_VALID" , "DATA_STATUS__RAW", "0x04", "CLASS_VALID" , "" }
}



######## Records for class 62 ########

# Waveform inputs

file "fgcudp_waveform.template"
{
pattern
{ RECORD                      , PARAM                   , NELM    , DESC    }
{ "ST_FAULTS:_STR"            , "ST_FAULTS__STR"        , "256"   , ""      }
{ "ST_WARNINGS:_STR"          , "ST_WARNINGS__STR"      , "256"   , ""      }
{ "ST_LATCHED:_STR"           , "ST_LATCHED__STR"       , "256"   , ""      }
{ "ST_UNLATCHED:_STR"         , "ST_UNLATCHED__STR"     , "256"   , ""      }
{ "ST_ADC_A:_STR"             , "ST_ADC_A__STR"         , "256"   , ""      }
{ "ST_ADC_B:_STR"             , "ST_ADC_B__STR"         , "256"   , ""      }
{ "ST_ADC_C:_STR"             , "ST_ADC_C__STR"         , "256"   , ""      }
{ "ST_ADC_D:_STR"             , "ST_ADC_D__STR"         , "256"   , ""      }
{ "ST_DCCT_A:_STR"            , "ST_DCCT_A__STR"        , "256"   , ""      }
}

# String inputs

file "fgcudp_stringin.template"
{
pattern
{ RECORD                      , PARAM                   , DESC    }
{ "STATE_PLL:_STR"            , "STATE_PLL__STR"        , ""      }
{ "STATE_OP:_STR"             , "STATE_OP__STR"         , ""      }
{ "STATE_VS:_STR"             , "STATE_VS__STR"         , ""      }
{ "STATE_PC:_STR"             , "STATE_PC__STR"         , ""      }
}

# Bit inputs

file "fgcudp_bi.template"
{
pattern
{ RECORD                      , PARAM                   , MASK    , ONAM                    , DESC    }
{ "ST_FAULTS:FGC_HW"          , "ST_FAULTS__RAW"        , "0x0001", "FGC_HW"                , ""      }
{ "ST_FAULTS:I_MEAS"          , "ST_FAULTS__RAW"        , "0x0002", "I_MEAS"                , ""      }
{ "ST_FAULTS:REG_ERROR"       , "ST_FAULTS__RAW"        , "0x0004", "REG_ERROR"             , ""      }
{ "ST_FAULTS:POL_SWITCH"      , "ST_FAULTS__RAW"        , "0x0008", "POL_SWITCH"            , ""      }
{ "ST_FAULTS:NO_PC_PERMIT"    , "ST_FAULTS__RAW"        , "0x0010", "NO_PC_PERMIT"          , ""      }
{ "ST_FAULTS:VS_STATE"        , "ST_FAULTS__RAW"        , "0x0020", "VS_STATE"              , ""      }
{ "ST_FAULTS:VS_RUN_TO"       , "ST_FAULTS__RAW"        , "0x0040", "VS_RUN_TO"             , ""      }
{ "ST_FAULTS:VS_FAULT"        , "ST_FAULTS__RAW"        , "0x0080", "VS_FAULT"              , ""      }
{ "ST_FAULTS:VS_EXTINTLOCK"   , "ST_FAULTS__RAW"        , "0x0100", "VS_EXTINTLOCK"         , ""      }
{ "ST_FAULTS:FGC_STATE"       , "ST_FAULTS__RAW"        , "0x0200", "FGC_STATE"             , ""      }
{ "ST_FAULTS:FAST_ABORT"      , "ST_FAULTS__RAW"        , "0x0400", "FAST_ABORT"            , ""      }
{ "ST_FAULTS:LIMITS"          , "ST_FAULTS__RAW"        , "0x0800", "LIMITS"                , ""      }
{ "ST_FAULTS:SLAVE"           , "ST_FAULTS__RAW"        , "0x1000", "SLAVE"                 , ""      }
{ "ST_FAULTS:V_ERROR"         , "ST_FAULTS__RAW"        , "0x4000", "V_ERROR"               , ""      }
{ "ST_WARNINGS:FGC_HW"        , "ST_WARNINGS__RAW"      , "0x0001", "FGC_HW"                , ""      }
{ "ST_WARNINGS:I_MEAS"        , "ST_WARNINGS__RAW"      , "0x0002", "I_MEAS"                , ""      }
{ "ST_WARNINGS:REG_ERROR"     , "ST_WARNINGS__RAW"      , "0x0004", "REG_ERROR"             , ""      }
{ "ST_WARNINGS:REF_LOCAL"     , "ST_WARNINGS__RAW"      , "0x0008", "REF_LOCAL"             , ""      }
{ "ST_WARNINGS:FGC_PSU"       , "ST_WARNINGS__RAW"      , "0x0010", "FGC_PSU"               , ""      }
{ "ST_WARNINGS:TEMPERATURE"   , "ST_WARNINGS__RAW"      , "0x0020", "TEMPERATURE"           , ""      }
{ "ST_WARNINGS:TIMING_EVT"    , "ST_WARNINGS__RAW"      , "0x0100", "TIMING_EVT"            , ""      }
{ "ST_WARNINGS:POL_SWITCH"    , "ST_WARNINGS__RAW"      , "0x0200", "POL_SWITCH"            , ""      }
{ "ST_WARNINGS:SIMULATION"    , "ST_WARNINGS__RAW"      , "0x1000", "SIMULATION"            , ""      }
{ "ST_WARNINGS:CONFIG"        , "ST_WARNINGS__RAW"      , "0x2000", "CONFIG"                , ""      }
{ "ST_WARNINGS:EXT_SYNC_LOST" , "ST_WARNINGS__RAW"      , "0x8000", "EXT_SYNC_LOST"         , ""      }
{ "ST_LATCHED:VDC_FAIL"       , "ST_LATCHED__RAW"       , "0x0001", "VDC_FAIL"              , ""      }
{ "ST_LATCHED:DIM_SYNC_FLT"   , "ST_LATCHED__RAW"       , "0x0004", "DIM_SYNC_FLT"          , ""      }
{ "ST_LATCHED:DIMS_EXP_FLT"   , "ST_LATCHED__RAW"       , "0x0008", "DIMS_EXP_FLT"          , ""      }
{ "ST_LATCHED:ID_FLT"         , "ST_LATCHED__RAW"       , "0x0010", "ID_FLT"                , ""      }
{ "ST_LATCHED:DSP_FLT"        , "ST_LATCHED__RAW"       , "0x0020", "DSP_FLT"               , ""      }
{ "ST_LATCHED:DIM_TRIG_FLT"   , "ST_LATCHED__RAW"       , "0x0040", "DIM_TRIG_FLT"          , ""      }
{ "ST_LATCHED:SCIVS_EXP_FLT"  , "ST_LATCHED__RAW"       , "0x0100", "SCIVS_EXP_FLT"         , ""      }
{ "ST_LATCHED:SPIVS_FLT"      , "ST_LATCHED__RAW"       , "0x0400", "SPIVS_FLT"             , ""      }
{ "ST_LATCHED:FGC_PSU_FAIL"   , "ST_LATCHED__RAW"       , "0x0800", "FGC_PSU_FAIL"          , ""      }
{ "ST_LATCHED:DAC_FLT"        , "ST_LATCHED__RAW"       , "0x1000", "DAC_FLT"               , ""      }
{ "ST_LATCHED:DALLAS_FLT"     , "ST_LATCHED__RAW"       , "0x2000", "DALLAS_FLT"            , ""      }
{ "ST_LATCHED:DCCT_PSU_FAIL"  , "ST_LATCHED__RAW"       , "0x4000", "DCCT_PSU_FAIL"         , ""      }
{ "ST_UNLATCHED:NOMINAL_LOAD" , "ST_UNLATCHED__RAW"     , "0x0001", "NOMINAL_LOAD"          , ""      }
{ "ST_UNLATCHED:SYNC_PLEASE"  , "ST_UNLATCHED__RAW"     , "0x0002", "SYNC_PLEASE"           , ""      }
{ "ST_UNLATCHED:I_MEAS_DIFF"  , "ST_UNLATCHED__RAW"     , "0x0004", "I_MEAS_DIFF"           , ""      }
{ "ST_UNLATCHED:POL_SWI_NEG"  , "ST_UNLATCHED__RAW"     , "0x0008", "POL_SWI_NEG"           , ""      }
{ "ST_UNLATCHED:POL_SWI_POS"  , "ST_UNLATCHED__RAW"     , "0x0010", "POL_SWI_POS"           , ""      }
{ "ST_UNLATCHED:PWR_FAILURE"  , "ST_UNLATCHED__RAW"     , "0x0020", "PWR_FAILURE"           , ""      }
{ "ST_UNLATCHED:PC_DISCH_RQ"  , "ST_UNLATCHED__RAW"     , "0x0040", "PC_DISCH_RQ"           , ""      }
{ "ST_UNLATCHED:PC_PERMIT"    , "ST_UNLATCHED__RAW"     , "0x0080", "PC_PERMIT"             , ""      }
{ "ST_UNLATCHED:POST_MORTEM"  , "ST_UNLATCHED__RAW"     , "0x0100", "POST_MORTEM"           , ""      }
{ "ST_UNLATCHED:FIELDBUS_WRN" , "ST_UNLATCHED__RAW"     , "0x0200", "FIELDBUS_WRN"          , ""      }
{ "ST_UNLATCHED:REF_RT_ACTIVE", "ST_UNLATCHED__RAW"     , "0x0400", "REF_RT_ACTIVE"         , ""      }
{ "ST_UNLATCHED:VS_POWER_ON"  , "ST_UNLATCHED__RAW"     , "0x0800", "VS_POWER_ON"           , ""      }
{ "ST_UNLATCHED:PC_REG_OK"    , "ST_UNLATCHED__RAW"     , "0x1000", "PC_REG_OK"             , ""      }
{ "ST_UNLATCHED:SYNC_REGFGC3" , "ST_UNLATCHED__RAW"     , "0x4000", "SYNC_REGFGC3"          , ""      }
{ "ST_UNLATCHED:LOG_PLEASE"   , "ST_UNLATCHED__RAW"     , "0x8000", "LOG_PLEASE"            , ""      }
{ "ST_ADC_A:V_MEAS_OK"        , "ST_ADC_A__RAW"         , "0x0002", "V_MEAS_OK"             , ""      }
{ "ST_ADC_A:IN_USE"           , "ST_ADC_A__RAW"         , "0x0004", "IN_USE"                , ""      }
{ "ST_ADC_A:SIGNAL_STUCK"     , "ST_ADC_A__RAW"         , "0x0008", "SIGNAL_STUCK"          , ""      }
{ "ST_ADC_A:CAL_ACTIVE"       , "ST_ADC_A__RAW"         , "0x0010", "CAL_ACTIVE"            , ""      }
{ "ST_ADC_A:CAL_FAILED"       , "ST_ADC_A__RAW"         , "0x0020", "CAL_FAILED"            , ""      }
{ "ST_ADC_B:V_MEAS_OK"        , "ST_ADC_B__RAW"         , "0x0002", "V_MEAS_OK"             , ""      }
{ "ST_ADC_B:IN_USE"           , "ST_ADC_B__RAW"         , "0x0004", "IN_USE"                , ""      }
{ "ST_ADC_B:SIGNAL_STUCK"     , "ST_ADC_B__RAW"         , "0x0008", "SIGNAL_STUCK"          , ""      }
{ "ST_ADC_B:CAL_ACTIVE"       , "ST_ADC_B__RAW"         , "0x0010", "CAL_ACTIVE"            , ""      }
{ "ST_ADC_B:CAL_FAILED"       , "ST_ADC_B__RAW"         , "0x0020", "CAL_FAILED"            , ""      }
{ "ST_ADC_C:V_MEAS_OK"        , "ST_ADC_C__RAW"         , "0x0002", "V_MEAS_OK"             , ""      }
{ "ST_ADC_C:IN_USE"           , "ST_ADC_C__RAW"         , "0x0004", "IN_USE"                , ""      }
{ "ST_ADC_C:SIGNAL_STUCK"     , "ST_ADC_C__RAW"         , "0x0008", "SIGNAL_STUCK"          , ""      }
{ "ST_ADC_C:CAL_ACTIVE"       , "ST_ADC_C__RAW"         , "0x0010", "CAL_ACTIVE"            , ""      }
{ "ST_ADC_C:CAL_FAILED"       , "ST_ADC_C__RAW"         , "0x0020", "CAL_FAILED"            , ""      }
{ "ST_ADC_D:V_MEAS_OK"        , "ST_ADC_D__RAW"         , "0x0002", "V_MEAS_OK"             , ""      }
{ "ST_ADC_D:IN_USE"           , "ST_ADC_D__RAW"         , "0x0004", "IN_USE"                , ""      }
{ "ST_ADC_D:SIGNAL_STUCK"     , "ST_ADC_D__RAW"         , "0x0008", "SIGNAL_STUCK"          , ""      }
{ "ST_ADC_D:CAL_ACTIVE"       , "ST_ADC_D__RAW"         , "0x0010", "CAL_ACTIVE"            , ""      }
{ "ST_ADC_D:CAL_FAILED"       , "ST_ADC_D__RAW"         , "0x0020", "CAL_FAILED"            , ""      }
{ "ST_DCCT_A:FAULT"           , "ST_DCCT_A__RAW"        , "0x0004", "FAULT"                 , ""      }
{ "ST_DCCT_A:MEAS_OK"         , "ST_DCCT_A__RAW"        , "0x0010", "MEAS_OK"               , ""      }
{ "ST_DCCT_A:CAL_FLT"         , "ST_DCCT_A__RAW"        , "0x0080", "CAL_FLT"               , ""      }
}

# Enum inputs

file "fgcudp_mbbi.template"
{
pattern
{ RECORD                      , PARAM                   , MASK  , UNSV      , DESC    ,
        VAL0  , STR0                    , SEV0      ,
        VAL1  , STR1                    , SEV1      ,
        VAL2  , STR2                    , SEV2      ,
        VAL3  , STR3                    , SEV3      ,
        VAL4  , STR4                    , SEV4      ,
        VAL5  , STR5                    , SEV5      ,
        VAL6  , STR6                    , SEV6      ,
        VAL7  , STR7                    , SEV7      ,
        VAL8  , STR8                    , SEV8      ,
        VAL9  , STR9                    , SEV9      ,
        VAL10 , STR10                   , SEV10     ,
        VAL11 , STR11                   , SEV11     ,
        VAL12 , STR12                   , SEV12     ,
        VAL13 , STR13                   , SEV13     ,
        VAL14 , STR14                   , SEV14     ,
        VAL15 , STR15                   , SEV15     }
{ "STATE_PLL"                 , "STATE_PLL__RAW"        , "0xFF", "INVALID" , ""      ,
        "0x00", "LOCKED"                , ""          ,
        "0x01", "CAPTURE"               , ""          ,
        "0x02", "FAST_SLEW"             , ""          ,
        "0x03", "NO_SYNC"               , ""          ,
        "0x04", "FAILED"                , ""          ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   }
{ "STATE_OP"                  , "STATE_OP__RAW"         , "0xFF", "INVALID" , ""      ,
        "0x00", "UNCONFIGURED"          , ""          ,
        "0x01", "NORMAL"                , ""          ,
        "0x02", "SIMULATION"            , ""          ,
        "0x03", "CALIBRATING"           , ""          ,
        "0x04", "TEST"                  , ""          ,
        "0x05", "BOOT"                  , ""          ,
        "0x06", "PROGRAMMING"           , ""          ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   }
{ "STATE_VS"                  , "STATE_VS__RAW"         , "0xFF", "INVALID" , ""      ,
        "0x00", "INVALID"               , ""          ,
        "0x01", "FLT_OFF"               , ""          ,
        "0x02", "FASTPA_OFF"            , ""          ,
        "0x03", "OFF"                   , ""          ,
        "0x04", "FAST_STOP"             , ""          ,
        "0x05", "STOPPING"              , ""          ,
        "0x06", "STARTING"              , ""          ,
        "0x07", "READY"                 , ""          ,
        "0x08", "BLOCKED"               , ""          ,
        "0x09", "NONE"                  , ""          ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   }
{ "STATE_PC:0"                , "STATE_PC__RAW"         , "0xFF", "INVALID" , ""      ,
        "0x00", "FLT_OFF"               , ""          ,
        "0x01", "OFF"                   , ""          ,
        "0x02", "FLT_STOPPING"          , ""          ,
        "0x03", "STOPPING"              , ""          ,
        "0x04", "STARTING"              , ""          ,
        "0x05", "SLOW_ABORT"            , ""          ,
        "0x06", "TO_STANDBY"            , ""          ,
        "0x07", "ON_STANDBY"            , ""          ,
        "0x08", "IDLE"                  , ""          ,
        "0x09", "TO_CYCLING"            , ""          ,
        "0x0A", "ARMED"                 , ""          ,
        "0x0B", "RUNNING"               , ""          ,
        "0x0C", "ABORTING"              , ""          ,
        "0x0D", "CYCLING"               , ""          ,
        "0x0E", "POL_SWITCHING"         , ""          ,
        "0x0F", "BLOCKING"              , ""          }
{ "STATE_PC:1"                , "STATE_PC__RAW"         , "0xFF", "INVALID" , ""      ,
        "0x10", "ECONOMY"               , ""          ,
        "0x11", "DIRECT"                , ""          ,
        "0x12", "PAUSED"                , ""          ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   ,
        ""    , ""                      , "INVALID"   }
}

# Long inputs

file "fgcudp_longin.template"
{
pattern
{ RECORD                      , PARAM                   , EGU     , DESC    }
{ "I_EARTH_PCNT"              , "I_EARTH_PCNT__INT"     , ""      , ""      }
{ "I_ERR_MA"                  , "I_ERR_MA__INT"         , ""      , ""      }
}

# Analog inputs

file "fgcudp_ai.template"
{
pattern
{ RECORD                      , PARAM                   , EGU     , PREC, DESC    }
{ "I_REF"                     , "I_REF__FLOAT"          , ""      , "6" , ""      }
{ "I_MEAS"                    , "I_MEAS__FLOAT"         , ""      , "6" , ""      }
{ "V_MEAS"                    , "V_MEAS__FLOAT"         , ""      , "6" , ""      }
{ "V_CAPA"                    , "V_CAPA__FLOAT"         , ""      , "6" , ""      }
}



# End of file: ../../sw/kt/fgcepics/fgcudpSup/Db/fgcudp_class_62.substitutions
