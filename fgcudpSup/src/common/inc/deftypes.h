/*!
 * @file   deftypes.h
 * @brief  Type declarations for property definitions
 * @author Stephen Page
 */

#ifndef DEFTYPES_H
#define DEFTYPES_H

#include <stdint.h>

// Constants for automatically generated defprops.h

#define DEFPROPS_FUNC_GET(function)     int32_t function(struct Cmd *, struct prop *)   //!< Function signature for get functions in defprops.h
#define DEFPROPS_FUNC_PARS(function)    void    function(uint32_t)                      //!< Function signature for parameter functions in defprops.h
#define DEFPROPS_FUNC_SET(function)     int32_t function(struct Cmd *, struct prop *)   //!< Function signature for set functions in defprops.h
#define DEFPROPS_FUNC_SETIF(function)   int32_t function(struct Cmd *)                  //!< Function signature for setif functions in defprops.h
#define DEFPROPS_PARS                                                                   //!< Use parameter functions in properties
#define DEFPROPS_STEPS                                                                  //!< Use steps in properties

#define PROP_SYM_NOT_SETTABLE           0x8000  //!< Flag used in symbol index to indicate that symbol is not settable

// Types

typedef const char *    def_const_string;   //!< Type to use for string constants
typedef uint32_t        def_props_flags;    //!< Type to use with in defprops.h for struct prop flags to truncate flags to the size of the field    

#define CONST const                         //!< CONST defines as const if supported by this platform (Not in FGC2) 

// Size-specific types, required for header files generated by the XML parser

typedef int8_t      INT8S;
typedef uint8_t     INT8U;
typedef int16_t     INT16S;
typedef uint16_t    INT16U;
typedef int32_t     INT32S;
typedef uint32_t    INT32U;

// Property structure

struct prop
{
    uint32_t     sym_idx;        //!< Index for property's symbol
    uint32_t     flags;          //!< Bit flags
    uint32_t     type;           //!< Type from enum prop_type_e
    uint32_t     setif_func_idx; //!< Index from enum setif_func_e
    uint32_t     set_func_idx;   //!< Index from enum set_func_e
    uint32_t     get_func_idx;   //!< Index from enum get_func_e
    uintptr_t    num_elements;   //!< Property size in elements
    uintptr_t    max_elements;   //!< Max property size in elements
    uint32_t     step;           //!< Step for array
    uint32_t     pars_idx;       //!< Parameter function index
    const void  *range;          //!< Pointer to sym_lst or limits. Pointer to an array of consts so pointer must be declared as pointer to constant.
    void        *value;          //!< Pointer to property value
    struct prop *parent;          //!< Pointer to parent property
};

// Integer limits structure

struct int_limits
{
    int32_t min;    //!< Min integer limit
    int32_t max;    //!< Max integer limit
};

// Floating point limits structure

struct float_limits
{
    float   min;    //!< Min float limit
    float   max;    //!< Max float limit
};

// Symbol list structure

struct sym_lst
{
    uint32_t    index;
    int32_t     value;
};

#endif

// EOF
